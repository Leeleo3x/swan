plugins {
    id "java"
    id "cpp"
}

group name
version = '1.0'
sourceSets.main.java.srcDirs = ['source/java']


def currentJavaHome = org.gradle.internal.jvm.Jvm.current().javaHome
model {
    toolChains {
        clang(Clang)
    }
    repositories {
        libs(PrebuiltLibraries) {
            jdk {
                def jniIncludeDir = "$currentJavaHome/include"
                headers.srcDir jniIncludeDir
                binaries.withType(SharedLibraryBinary) {
                    switch (targetPlatform.operatingSystem.name) {
                        case 'linux':
                            headers.srcDirs "$jniIncludeDir/linux"
                            switch (targetPlatform.architecture.name) {
                                case 'x86-64':
                                    sharedLibraryLinkFile = file("$currentJavaHome/jre/lib/amd64/server/libjvm.so")
                                    break
                            }
                            break
                        case 'osx':
                            headers.srcDirs "$jniIncludeDir/darwin"
                            sharedLibraryLinkFile = file("$currentJavaHome/jre/lib/server/libjvm.dylib")
                            break
                        case 'windows':
                            headers.srcDirs "$jniIncludeDir/win32"
                            sharedLibraryLinkFile = file("$currentJavaHome/lib/jvm.lib")
                            break
                    }
                }
            }
        }
    }

    components {
        translator(NativeLibrarySpec) {
            sources.cpp {
                source {
                    srcDir 'source/c'
                    include '**/*.cpp'
                }
                lib library: 'jdk'
                lib project: ':swift-wala-translator', library: "swiftWala"
            }

            binaries {
                withType(StaticLibraryBinarySpec) {
                    buildable = false
                }
                withType(SharedLibraryBinarySpec) {
                    linker.args "-Wl,-rpath,$rootProject.projectDir/build/libs/swiftWala/shared"
                }
            }
        }
    }
}

task run(type:JavaExec) {
    main = "com.ibm.wala.cast.swift.SwiftToCAstTranslator"
    classpath = sourceSets.main.runtimeClasspath
    systemProperties 'java.library.path': "$rootProject.projectDir/build/libs/translator/shared"
}

dependencies {
    compile fileTree(dir: "${WALA_DIR}/com.ibm.wala.util/build/libs", include: '*.jar')
    compile fileTree(dir: "${WALA_DIR}/com.ibm.wala.core/build/libs", include: '*.jar')
    compile fileTree(dir: "${WALA_DIR}/com.ibm.wala.shrike/build/libs", include: '*.jar')
    compile fileTree(dir: "${WALA_DIR}/com.ibm.wala.cast/build/libs", include: '*.jar')
    compile fileTree(dir: "${WALA_DIR}/com.ibm.wala.cast/build/libs", include: '*.jar')
}

